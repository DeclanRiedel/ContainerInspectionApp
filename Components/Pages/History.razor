@page "/history"
@attribute [StreamRendering]
@rendermode InteractiveServer
@using ContainerInspectionApp.Services
@using ContainerInspectionApp.Models
@inject ContainerTableOperations ContainerTableOperations

<PageTitle>Container History</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true">Container History</MudText>

@if (!_isDatabaseConnected)
{
    <MudAlert Severity="Severity.Error">Unable to connect to the database. Please check your connection settings.</MudAlert>
}
else
{
    <MudTable Items="@containers" Hover="true" Striped="true" Dense="true">
        <HeaderContent>
            <MudTh>Container ID</MudTh>
            <MudTh>Container Type</MudTh>
            <MudTh>Contents</MudTh>
            <MudTh>Date Added</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Container ID">@context.ContainerId</MudTd>
            <MudTd DataLabel="Container Type">@context.ContainerType</MudTd>
            <MudTd DataLabel="Contents">@context.Contents</MudTd>
            <MudTd DataLabel="Date Added">@context.DateAdded.ToShortDateString()</MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    private bool _isDatabaseConnected = true;
    private List<Container> containers = new List<Container>();

    protected override async Task OnInitializedAsync()
    {
        _isDatabaseConnected = await ContainerTableOperations.TestConnection();
        if (_isDatabaseConnected)
        {
            await LoadContainers();
        }
    }

    private async Task LoadContainers()
    {
        containers = await ContainerTableOperations.GetAllContainers();
    }
}