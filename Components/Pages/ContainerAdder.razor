@page "/add-container"
@using ContainerInspectionApp.Services
@using ContainerInspectionApp.Models
@inject ContainerTableOperations ContainerTableOperations

<PageTitle>Add Container</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true">Add New Container</MudText>

<MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
    <MudTextField T="string" Label="Container ID" Required="true" RequiredError="Container ID is required!" @bind-Value="container.ContainerId" />
    <MudTextField T="string" Label="Container Type" Required="true" RequiredError="Container Type is required!" @bind-Value="container.ContainerType" />
    <MudTextField T="string" Label="Contents" Required="true" RequiredError="Contents are required!" @bind-Value="container.Contents" />
    <MudDatePicker Label="Date Added" @bind-Date="container.DateAdded" />
    <MudTextField T="string" Label="Location" Required="true" RequiredError="Location is required!" @bind-Value="container.Location" />
    <MudTextField T="string" Label="Status" Required="true" RequiredError="Status is required!" @bind-Value="container.Status" />
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(async () => await SubmitForm())">Submit</MudButton>
</MudForm>

<MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="@(async () => await ResetDatabase())">Reset Database</MudButton>

@if (!string.IsNullOrEmpty(message))
{
    <MudAlert Severity="@alertSeverity" Class="mt-4">@message</MudAlert>
}

@code {
    private MudForm? form;
    private bool success;
    private string[] errors = { };
    private string message = "";
    private Severity alertSeverity = Severity.Success;

    private Container container = new Container { DateAdded = DateTime.Now };

    protected override void OnInitialized()
    {
        form = new MudForm();
    }

    private async Task SubmitForm()
    {
        if (form != null)
        {
            await form.Validate();
            if (form.IsValid)
            {
                var result = await ContainerTableOperations.InsertContainer(container);
                if (result)
                {
                    message = "Container added successfully!";
                    alertSeverity = Severity.Success;
                    ResetForm();
                }
                else
                {
                    message = "Failed to add container. Please try again.";
                    alertSeverity = Severity.Error;
                }
            }
        }
    }

    private void ResetForm()
    {
        container = new Container { DateAdded = DateTime.Now };
        StateHasChanged();
    }

    private async Task ResetDatabase()
    {
        var result = await ContainerTableOperations.ResetDatabase();
        if (result)
        {
            message = "Database reset successfully!";
            alertSeverity = Severity.Success;
        }
        else
        {
            message = "Failed to reset database. Please try again.";
            alertSeverity = Severity.Error;
        }
    }
}