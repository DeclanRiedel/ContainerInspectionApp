@page "/add-container"
@using ContainerInspectionApp.Services
@using ContainerInspectionApp.Models
@inherits BasePage

<PageTitle>Add Container</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true">Add New Container</MudText>

@if (!_isDatabaseConnected)
{
    <MudAlert Severity="MudBlazor.Severity.Error" Class="mb-4">
        Unable to connect to the database. Please check your connection string and try again.
    </MudAlert>
}
else
{
    <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
        <MudTextField T="string" Label="Container ID" Required="true" RequiredError="Container ID is required!" @bind-Value="container.ContainerId" />
        <MudTextField T="string" Label="Container Type" Required="true" RequiredError="Container Type is required!" @bind-Value="container.ContainerType" />
        <MudTextField T="string" Label="Extra Info" @bind-Value="container.ExtraInfo" />
        <MudItem>
            <InputCheckbox @bind-Value="container.IsDamaged" id="isDamaged" />
            <label for="isDamaged" class="ml-2">Is Damaged</label>
        </MudItem>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(async () => await SubmitForm())">Submit</MudButton>
    </MudForm>

    <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="FillRandomInfo">Fill with Random Info</MudButton>

    @if (!string.IsNullOrEmpty(message))
    {
        <MudAlert Severity="@alertSeverity" Class="mt-4">@message</MudAlert>
    }
}

@code {
    private MudForm? form;
    private bool success;
    private string[] errors = { };
    private string message = "";
    private MudBlazor.Severity alertSeverity = MudBlazor.Severity.Success;

    private Container container = new Container();

    protected override void OnInitialized()
    {
        form = new MudForm();
    }

    private async Task SubmitForm()
    {
        if (form != null)
        {
            await form.Validate();
            if (form.IsValid)
            {
                container.TimeAdded = DateTime.Now;
                var result = await ContainerTableOperations.InsertContainer(container);
                if (result)
                {
                    message = $"Container added successfully! ID: {container.ContainerId}";
                    alertSeverity = MudBlazor.Severity.Success;
                    ResetForm();
                }
                else
                {
                    message = "Failed to add container. ID might be duplicated.";
                    alertSeverity = MudBlazor.Severity.Error;
                }
            }
        }
    }

    private void ResetForm()
    {
        container = new Container();
        StateHasChanged();
    }

    private void FillRandomInfo()
    {
        container.ContainerId = $"CONT-{Guid.NewGuid().ToString().Substring(0, 8)}";
        container.ContainerType = new[] { "Standard", "Refrigerated", "Tank", "Open Top" }[new Random().Next(4)];
        container.ExtraInfo = $"Random info: {Guid.NewGuid().ToString()}";
        container.IsDamaged = new Random().Next(2) == 0;
        StateHasChanged();
    }
}